package com.syt.cellphone.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syt.cellphone.pojo.PhoneBase;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHONE_BASE".
*/
public class PhoneBaseDao extends AbstractDao<PhoneBase, Integer> {

    public static final String TABLENAME = "PHONE_BASE";

    /**
     * Properties of entity PhoneBase.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BaseId = new Property(0, int.class, "baseId", true, "BASE_ID");
        public final static Property BaseName = new Property(1, String.class, "baseName", false, "BASE_NAME");
        public final static Property BaseFeature = new Property(2, String.class, "baseFeature", false, "BASE_FEATURE");
        public final static Property BasePrice = new Property(3, String.class, "basePrice", false, "BASE_PRICE");
        public final static Property BaseImage = new Property(4, String.class, "baseImage", false, "BASE_IMAGE");
        public final static Property BaseRemarks = new Property(5, String.class, "baseRemarks", false, "BASE_REMARKS");
    }


    public PhoneBaseDao(DaoConfig config) {
        super(config);
    }
    
    public PhoneBaseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHONE_BASE\" (" + //
                "\"BASE_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: baseId
                "\"BASE_NAME\" TEXT," + // 1: baseName
                "\"BASE_FEATURE\" TEXT," + // 2: baseFeature
                "\"BASE_PRICE\" TEXT," + // 3: basePrice
                "\"BASE_IMAGE\" TEXT," + // 4: baseImage
                "\"BASE_REMARKS\" TEXT);"); // 5: baseRemarks
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHONE_BASE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhoneBase entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBaseId());
 
        String baseName = entity.getBaseName();
        if (baseName != null) {
            stmt.bindString(2, baseName);
        }
 
        String baseFeature = entity.getBaseFeature();
        if (baseFeature != null) {
            stmt.bindString(3, baseFeature);
        }
 
        String basePrice = entity.getBasePrice();
        if (basePrice != null) {
            stmt.bindString(4, basePrice);
        }
 
        String baseImage = entity.getBaseImage();
        if (baseImage != null) {
            stmt.bindString(5, baseImage);
        }
 
        String baseRemarks = entity.getBaseRemarks();
        if (baseRemarks != null) {
            stmt.bindString(6, baseRemarks);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhoneBase entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getBaseId());
 
        String baseName = entity.getBaseName();
        if (baseName != null) {
            stmt.bindString(2, baseName);
        }
 
        String baseFeature = entity.getBaseFeature();
        if (baseFeature != null) {
            stmt.bindString(3, baseFeature);
        }
 
        String basePrice = entity.getBasePrice();
        if (basePrice != null) {
            stmt.bindString(4, basePrice);
        }
 
        String baseImage = entity.getBaseImage();
        if (baseImage != null) {
            stmt.bindString(5, baseImage);
        }
 
        String baseRemarks = entity.getBaseRemarks();
        if (baseRemarks != null) {
            stmt.bindString(6, baseRemarks);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public PhoneBase readEntity(Cursor cursor, int offset) {
        PhoneBase entity = new PhoneBase( //
            cursor.getInt(offset + 0), // baseId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // baseName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // baseFeature
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // basePrice
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // baseImage
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // baseRemarks
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhoneBase entity, int offset) {
        entity.setBaseId(cursor.getInt(offset + 0));
        entity.setBaseName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBaseFeature(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBasePrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBaseImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBaseRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(PhoneBase entity, long rowId) {
        return entity.getBaseId();
    }
    
    @Override
    public Integer getKey(PhoneBase entity) {
        if(entity != null) {
            return entity.getBaseId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhoneBase entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
