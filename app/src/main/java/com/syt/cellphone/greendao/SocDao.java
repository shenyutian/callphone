package com.syt.cellphone.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.syt.cellphone.pojo.Soc;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOC".
*/
public class SocDao extends AbstractDao<Soc, Long> {

    public static final String TABLENAME = "SOC";

    /**
     * Properties of entity Soc.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SocId = new Property(0, long.class, "socId", true, "_id");
        public final static Property SocName = new Property(1, String.class, "socName", false, "SOC_NAME");
        public final static Property SocTrademark = new Property(2, String.class, "socTrademark", false, "SOC_TRADEMARK");
        public final static Property SocProcess = new Property(3, String.class, "socProcess", false, "SOC_PROCESS");
        public final static Property SocProperty = new Property(4, String.class, "socProperty", false, "SOC_PROPERTY");
        public final static Property SocBbx = new Property(5, String.class, "socBbx", false, "SOC_BBX");
        public final static Property SocCpuSpecification = new Property(6, String.class, "socCpuSpecification", false, "SOC_CPU_SPECIFICATION");
        public final static Property SocGpuSpecification = new Property(7, String.class, "socGpuSpecification", false, "SOC_GPU_SPECIFICATION");
    }


    public SocDao(DaoConfig config) {
        super(config);
    }
    
    public SocDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOC\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: socId
                "\"SOC_NAME\" TEXT," + // 1: socName
                "\"SOC_TRADEMARK\" TEXT," + // 2: socTrademark
                "\"SOC_PROCESS\" TEXT," + // 3: socProcess
                "\"SOC_PROPERTY\" TEXT," + // 4: socProperty
                "\"SOC_BBX\" TEXT," + // 5: socBbx
                "\"SOC_CPU_SPECIFICATION\" TEXT," + // 6: socCpuSpecification
                "\"SOC_GPU_SPECIFICATION\" TEXT);"); // 7: socGpuSpecification
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOC\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Soc entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSocId());
 
        String socName = entity.getSocName();
        if (socName != null) {
            stmt.bindString(2, socName);
        }
 
        String socTrademark = entity.getSocTrademark();
        if (socTrademark != null) {
            stmt.bindString(3, socTrademark);
        }
 
        String socProcess = entity.getSocProcess();
        if (socProcess != null) {
            stmt.bindString(4, socProcess);
        }
 
        String socProperty = entity.getSocProperty();
        if (socProperty != null) {
            stmt.bindString(5, socProperty);
        }
 
        String socBbx = entity.getSocBbx();
        if (socBbx != null) {
            stmt.bindString(6, socBbx);
        }
 
        String socCpuSpecification = entity.getSocCpuSpecification();
        if (socCpuSpecification != null) {
            stmt.bindString(7, socCpuSpecification);
        }
 
        String socGpuSpecification = entity.getSocGpuSpecification();
        if (socGpuSpecification != null) {
            stmt.bindString(8, socGpuSpecification);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Soc entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSocId());
 
        String socName = entity.getSocName();
        if (socName != null) {
            stmt.bindString(2, socName);
        }
 
        String socTrademark = entity.getSocTrademark();
        if (socTrademark != null) {
            stmt.bindString(3, socTrademark);
        }
 
        String socProcess = entity.getSocProcess();
        if (socProcess != null) {
            stmt.bindString(4, socProcess);
        }
 
        String socProperty = entity.getSocProperty();
        if (socProperty != null) {
            stmt.bindString(5, socProperty);
        }
 
        String socBbx = entity.getSocBbx();
        if (socBbx != null) {
            stmt.bindString(6, socBbx);
        }
 
        String socCpuSpecification = entity.getSocCpuSpecification();
        if (socCpuSpecification != null) {
            stmt.bindString(7, socCpuSpecification);
        }
 
        String socGpuSpecification = entity.getSocGpuSpecification();
        if (socGpuSpecification != null) {
            stmt.bindString(8, socGpuSpecification);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Soc readEntity(Cursor cursor, int offset) {
        Soc entity = new Soc( //
            cursor.getLong(offset + 0), // socId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // socName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // socTrademark
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // socProcess
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // socProperty
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // socBbx
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // socCpuSpecification
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // socGpuSpecification
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Soc entity, int offset) {
        entity.setSocId(cursor.getLong(offset + 0));
        entity.setSocName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSocTrademark(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSocProcess(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSocProperty(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSocBbx(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSocCpuSpecification(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSocGpuSpecification(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Soc entity, long rowId) {
        entity.setSocId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Soc entity) {
        if(entity != null) {
            return entity.getSocId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Soc entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
